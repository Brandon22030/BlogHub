// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  email             String         @unique
  password          String
  name              String
  imageUrl          String?
  role              Role           @default(USER)
  articles          Article[]
  comments          Comment[]
  likes             Like[]         @relation("UserLikes")
  commentLikes      CommentLike[]  // Relation inverse pour les likes de commentaires
  isVerified        Boolean        @default(false)
  verificationToken String?
  notifications     Notification[]
  passwordResetToken   String?
  passwordResetExpires DateTime? 
  favorites         Favorite[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation("UserLikes", fields: [userId], references: [id])
  userId    String   @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, articleId]) // Un utilisateur ne peut mettre en favori un article qu'une fois
}

model Article {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  imageUrl   String?
  author     User          @relation(fields: [authorId], references: [id])
  authorId   String        @db.ObjectId
  comments   Comment[]
  category   Category      @relation(fields: [categoryId], references: [id])
  categoryId String        @db.ObjectId
  views      Int           @default(0)
  likes      Int           @default(0)
  status     ArticleStatus @default(DRAFT)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  likesList  Like[]
  favoritedBy Favorite[]
}



model Comment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String  @db.ObjectId
  article   Article @relation(fields: [articleId], references: [id])
  articleId String  @db.ObjectId

  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String?   @db.ObjectId
  replies  Comment[] @relation("CommentReplies")

  likesCount Int           @default(0)
  commentLikes CommentLike[] @relation("CommentLikesList")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommentLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  comment   Comment  @relation("CommentLikesList", fields: [commentId], references: [id])
  commentId String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  title     String
  message   String
  type      String
  link      String?
  sourceId  String?
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  slug     String    @unique
  imageUrl String

  articles Article[]
}

enum Role {
  USER
  ADMIN
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}
